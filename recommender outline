# 📊 推荐策略总览

我们从三个维度给每道候选题打分，并计算总分排序：

| 评分维度         | 权重（Weight） |
|------------------|-----------------|
| 题目相似度       | 0.4             |
| 知识点匹配度     | 0.4             |
| 题目难度适配度   | 0.2             |

## 总得分计算公式

总得分 =  
`0.4 * 相似度得分 + 0.4 * 知识点匹配得分 + 0.2 * 难度匹配得分`

---

# 🧮 打分细节

✅ **1. 相似度得分 (score_similarity)**  
- 如果候选题与当前题在 API 返回的“相似题”列表中，则得分为 1。
- 否则得分为 0。

✅ **2. 知识点匹配得分 (score_common_topics)**  
- 对每道候选题，找出它和当前题共有的知识点（如：数组、二分等）。
- 如果这些共有知识点中有很多是用户掌握较差的（掌握度为 1 档或 2 档），说明这道题对用户“查漏补缺”很有帮助。

**匹配得分** =  
`用户掌握较差的共同知识点数量 / 所有共同知识点数量`

✅ **3. 难度匹配得分 (score_difficulty)**  
- 用户当前题的知识点中，会计算出用户的平均掌握档位（1-3，数字越大掌握越差）。
- 对每道候选题，获取它的难度档位（1-3）。
  - 如果题目难度刚好等于用户平均掌握档位，得分为 1。
  - 如果相差 1 档，得分为 0.5。
  - 如果相差 2 档，得分为 0。

---

# 🧱 候选题的来源

我们会根据是否能找到足够相似题，采取两种不同的候选策略：

💡 **情况一：相似题数量 ≥ 5**  
直接使用这些相似题作为候选。  
相似度分 = 1，其他得分继续计算。

💡 **情况二：相似题数量 < 5**  
- 先加入已有的相似题。
- 再根据用户掌握较差（档位为 2 或 3）的知识点，从 `/api/topics_difficulty_bucket/` 接口中找到难度与用户掌握档位一致的题目，也作为候选补充。

🚫 **过滤掉用户已经做过并通过的题**  
系统会检查用户的提交记录（通过 `/api/get_user_history/`）；  
如果某道题已经做过并通过（AC），则直接从候选列表中剔除。

---

# 🔚 最终推荐

所有候选题都会得到一个 0~1 的总分；  
系统将其按总分排序，取前 N 道题推荐给用户（比如 N=2）；  
推荐结果会通过 `/api/set_recommendations/` 存入后端系统。
